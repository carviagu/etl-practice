import pandas as pd
hipotecas = pd.read_csv('etl/data/hipotecas/hipotecas_lectura')
import pandas as pd
hipotecas = pd.read_csv('etl/data/hipotecas/hipotecas_lectura')
hipotecas = pd.read_csv('./etl/data/hipotecas/hipotecas_lectura')
hipotecas = pd.read_csv('etl/data/hipotecas/hipotecas_lectura')
hipotecas = pd.read('etl/data/hipotecas/hipotecas_lectura')
setwd("~/etl") # para mi m√°quina local
path_to_file <- "data/ejemplos_lectura.xlsx"
df_ejemplos <- read_xlsx(path_to_file)
df_ejemplos
library(readxl)
df_ejemplos <- read_xlsx(path_to_file)
df_ejemplos
# Hay hojas ocultas
excel_sheets(path_to_file)
# Para leer una hoja en concreto
df_ejemplos <- read_xlsx(path_to_file, sheet = "Fechas")
df_ejemplos
# Le decimos que lea a partir de la tercera fila
df_fechas <- read_xlsx(path_to_file,
sheet = "Fechas",
skip = 2)
df_fechas
# Para leer regiones
# c("skip", "skip", "skip", "guess", "guess", "guess", "guess")
df_fechas <- read_xlsx(path_to_file,
sheet = "Fechas",
skip = 2,
col_types = c(rep("skip", 3), rep("guess", 5)))
df_fechas
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
# WITH R
library(readr)
# Searching dataframe column names
names <- names(read_csv('/home/rstudio/etl/data/hipotecas/hipotecas_lectura'))
# Reading data frame
hipotecas2 <- read_csv('/home/rstudio/etl/data/hipotecas/hipotecas_lectura',
skip = 13, n_max = 6, col_names = names)
hipotecas2
# WITH R
hip_ine <- read.csv2('/home/rstudio/etl/data/hipotecas/hipotecas_numero_ine.csv',
skip = 6, nrows = 18 , fileEncoding = 'ISO-8859-2')
head(hip_ine)
reticulate::repl_python()
library(dplyr)
# Connecting to the database
conn <- DBI::dbConnect(RSQLite::SQLite(), '../data/indexKaggle.sqlite')
# Listing tables
DBI::dbListTables(conn)
# Reading information about IndexPrice
DBI::dbListFields(conn, 'IndexPrice')
DBI::dbListFields(conn, 'IndexMeta')
# We need to join both tables so we want to know the region of the stock
# index and then extract only 2009 values
query = "
SELECT p.stock_index, date, open, high,
low, close, adj_close, volume
FROM IndexPrice p INNER JOIN IndexMeta m ON(p.stock_index == m.stock_index)
WHERE (m.region == 'United States' OR m.region == 'Europe') AND
strftime('%Y', p.date) == '2009'
"
table <- tbl(conn, sql(query))
table %>% collect() # will execute the query
# Closing connection
DBI::dbDisconnect(conn)
# library(dplyr)
# Connecting to the database
conn <- DBI::dbConnect(RSQLite::SQLite(), '../data/indexKaggle.sqlite')
# We need to join both tables so we want to know the currency of the stock
# index
query <- "
SELECT p.stock_index, adj_close, volume
FROM IndexPrice p INNER JOIN IndexMeta m ON(p.stock_index == m.stock_index)
WHERE (m.currency == 'EUR' OR m.currency == 'USD') AND
strftime('%Y', p.date) BETWEEN '2007' AND '2009'
"
table <- tbl(conn, sql(query))
table %>% collect() # will execute the query
# Closing connection
DBI::dbDisconnect(conn)
reticulate::repl_python()
conn <- DBI::dbConnect(RSQLite::SQLite(), '../data/elections2016.sqlite')
DBI::dbListFields(conn, 'Polls')
DBI::dbListFields(conn, 'Results')
query <- "
SELECT p.state, p.enddate, p.grade, p.samplesize, p.adjpoll_clinton,
p.adjpoll_trump, r.electoral_votes, r.clinton, r.trump
FROM Polls p INNER JOIN Results r ON(p.state == r.state)
WHERE p.state == 'Ohio' OR p.state == 'Pennsylvania'
ORDER BY p.enddate DESC
"
table <- tbl(conn, sql(query))
table %>% collect() # will execute the query
reticulate::repl_python()
conn <- DBI::dbConnect(RSQLite::SQLite(), '../data/pets.sqlite')
DBI::dbListTables(conn)
DBI::dbListFields(conn, 'Owners')
DBI::dbListFields(conn, 'Pets')
query <- "
SELECT o.OwnerID, count(p.PetID)
FROM Owners o INNER JOIN Pets p ON(o.OwnerID == p.OwnerID)
GROUP BY o.OwnerID
HAVING count(p.PetID) > 1
"
table <- tbl(conn, sql(query))
table %>% collect() # will execute the query
reticulate::repl_python()
conn <- DBI::dbConnect(RSQLite::SQLite(), '../data/pets.sqlite')
DBI::dbListTables(conn)
DBI::dbListFields(conn, 'ProceduresDetails')
DBI::dbListFields(conn, 'ProceduresHistory')
query <- "
SELECT h.date, AVG(d.price)
FROM ProceduresHistory h INNER JOIN ProceduresDetails d
ON(h.ProcedureType == d.ProcedureType AND
h.ProcedureSubCode == d.ProcedureSubCode)
GROUP BY h.date
"
table <- tbl(conn, sql(query))
table %>% collect() # will execute the query
reticulate::repl_python()
